#!/usr/bin/env node
'use strict';

/* eslint no-unused-vars: off */

/**
 * Module dependencies.
 */

const program = require('commander');
const path = require('path');
const fs = require('fs');
const resolve = path.resolve;
const exists = fs.existsSync;
const Mock = require('../');
const utils = Mock.utils;
const join = path.join;
const cwd = process.cwd();
const mock = new Mock();

/**
 * Files.
 */

let file = '';

/**
 * Globals.
 */

let globals = [];

// options

program
  .version(JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8')).version)
  .usage('[options] <file ...>')
  .option('-p, --port <port>', 'Define the mock server started port, default is 8008')
  .option('-w, --watch', 'Listen to the file changes and restart the service')
  .option('-c, --config <file>', 'Custom profiles, default is mock/config.js')
  .option('-l, --log', 'Record the log and save to "mock/log/" and named {date}.log')
  .option('-L, --Log <path>', 'Record the log and save to <path>, default "mock/log/" and named {date}.log')


program._name = 'mock';

// parse args

program.parse(process.argv);

// infinite stack traces

Error.stackTraceLimit = Infinity; // TODO: config

const extensions = ['js', 'json'];

// default files to mock/config.js

if (!!program.config) {
  file = program.config
} else {
  file = 'mock/config.js'
}

// resolve

file = resolve(file);

if (file == '') {
  throw new Error('No mock files found');
  process.exit(1);
}

// custom port
if (program.port) {
  mock.setPort(program.port)
}

// log
if (program.log) {
  mock.showLog(path.resolve(cwd, 'mock/log/'))
}

// Log
if (program.Log) {
  mock.showLog(path.resolve(cwd, program.Log))
}

// --watch

let loadAndRun;
let purge;
let rerun;

if (program.watch) {
  console.log('>> Watch mode');
  process.on('SIGINT', () => {
    console.log('\n>> Exit.\n');
    process.exit(130);
  });

  loadAndRun = () => {
    try {
      mock.file = file;
      mock.run()
    } catch (e) {
      console.log(e.stack);
    }
  };
  // delete 旧的引用
  purge = () => {
    delete require.cache[file];
  };

  loadAndRun();

  rerun = () => {
    purge();
    mock.rerun()
  };

  utils.watch([file], () => {
    console.log('File changed!')
    rerun();
  });
} else {
  // load
  mock.file = file;
  mock.run();
}

process.on('SIGINT', () => {
  process.exit(130)
});
